// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============
// = Screenshot =
// ==============
// A unique screenshot of a game

model Screenshot {
  id           Int      @id @default(autoincrement())
  creationDate DateTime @default(now())

  // Official game name
  gameName String

  // Year the game came out
  year Int

  // Has one image
  image   Image @relation(fields: [imageId], references: [id])
  imageId Int   @unique

  // Has many phonetic names
  phoneticNames PhoneticName[]

  // User who added the screenshot
  addedBy       User @relation("AddedBy", fields: [addedByUserId], references: [id])
  addedByUserId Int

  firstGuessedBy       User? @relation("FirstGuessedBy", fields: [firstGuessedByUserId], references: [id])
  firstGuessedByUserId Int?
}

model Image {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid()) @db.Uuid
  creationDate DateTime @default(now())

  transformations Json

  screenshot Screenshot?
}

// ================
// = PhoneticName =
// ================
// To correctly guess a Screenshot, the user's input will be tested against those phonetic names.

model PhoneticName {
  id Int @id @default(autoincrement())

  // Original unchanged name
  originalName String

  // Phonetic version of the name (stem + metaphone)
  phoneticName String

  // Belongs to a Screenshot
  screenshot   Screenshot @relation(fields: [screenshotId], references: [id], onDelete: Cascade)
  screenshotId Int
}

// ========
// = User =
// ========
// User account, can be Player and/or Admin. Players have a user account even if they have not signed-up yet.

model User {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid()) @db.Uuid
  creationDate DateTime @default(now())

  // If user is not registered yet, they are identified via a token stored in the browser, which never expires
  browserToken String? @unique

  // Username
  username String? @unique @db.Citext

  // Hashed password
  passwordHash String?

  // Email is not mandatory upon sign-up
  email String? @unique @db.Citext

  // User can administrate a customer, or enexten back office, or be an installator
  roles UserRoleEnum[]

  // Has many RefreshTokens
  refreshTokens UserRefreshToken[]

  // User Creation Date
  signUpDate DateTime? @default(now())

  // Screenshot added by the user
  screenshotsAdded Screenshot[] @relation("AddedBy")

  // Screenshot first guessed by the user
  screenshotsFirstGuessed Screenshot[] @relation("FirstGuessedBy")
}

enum UserRoleEnum {
  Player
  Admin
}

// ====================
// = UserRefreshToken =
// ====================
// https://stackoverflow.com/a/39003201

model UserRefreshToken {
  id             Int      @id @default(autoincrement())
  creationDate   DateTime @default(now())
  token          String   @unique
  expirationDate DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}
